name: Clean and Sanitize CSV

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  clean-csv:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.3

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas beautifulsoup4

    - name: Clean and sanitize CSV
      run: |
        python -c "
        import pandas as pd
        from bs4 import BeautifulSoup
        import logging

        # Configure logging
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

        def clean_title(title):
            if isinstance(title, str):
                # Remove HTML tags using BeautifulSoup
                soup = BeautifulSoup(title, 'html.parser')
                title = soup.get_text()
                # Remove leading/trailing whitespace
                title = title.strip()
                return title
            elif isinstance(title, float):
                return str(title)
            else:
                return ''

        try:
            # Read the CSV file with UTF-8 encoding
            csv_file_path = '${{ github.workspace }}/feed-data.csv'
            with open(csv_file_path, 'r', encoding='utf-8') as file:
                df = pd.read_csv(file)

            # Clean and sanitize the 'Title' column
            df['Title'] = df['Title'].apply(clean_title)

            # Remove duplicate entries based on the 'Link' column
            df.drop_duplicates(subset='Link', keep='first', inplace=True)

            # Save the cleaned and sanitized data back to the CSV file with UTF-8 encoding
            with open(csv_file_path, 'w', encoding='utf-8') as file:
                df.to_csv(file, index=False)

            logging.info('CSV file cleaned and sanitized successfully.')
        except FileNotFoundError:
            logging.error('CSV file not found.')
        except Exception as e:
            logging.error(f'An error occurred: {str(e)}')
        "

    - name: Check for modified files
      id: git-check
      run: echo "modified=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT

    - name: Commit and push changes
      if: steps.git-check.outputs.modified != '0'
      run: |
        git config --local user.email "${{ secrets.USER_EMAIL }}"
        git config --local user.name "${{ secrets.USER_NAME }}"
        git add feed-data.csv
        git commit -m "Clean and sanitize CSV data"
        git push